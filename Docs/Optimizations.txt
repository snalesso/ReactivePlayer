OPTIMIZATIONS

- make lazy subjects ("connectable")
- ensure non-async code before Task.FromResult doesn't block UI thread
- ensure Autofac disposes things
- ensure transients throughout the application get disposed
- learn about Task.ConfigureAwait
- IDisposable				https://github.com/Fody/Janitor
- IEquatable<>				https://github.com/Fody/Equals
- Expression trees			https://github.com/dadhi/FastExpressionCompiler
- optimize for x64
- Reflection.Emit			http://docs.servicestack.net/reflection-utils
- Compiled expression trees	http://docs.servicestack.net/reflection-utils
- LINQ Optimizations		http://mattwarren.org/2016/09/29/Optimising-LINQ/
- study VOLATILE keyword
- debugging converters		https://stackoverflow.com/a/32195726/1790497
- explicitly calls to GC (e.g. after huge collection filtering/sorting)

Articles & Ideas

Writing High-Performance Managed Applications : A Primer	https://msdn.microsoft.com/it-it/library/ms973858.aspx
Writing Faster Managed Code: Know What Things Cost			https://msdn.microsoft.com/it-it/library/ms973852(it-it).aspx
Garbage Collector Basics and Performance Hints				https://msdn.microsoft.com/it-it/library/ms973837.aspx
Performance Tips and Tricks in .NET Applications			https://msdn.microsoft.com/it-it/library/ms973839(it-it).aspx